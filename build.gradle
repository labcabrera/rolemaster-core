plugins {
	id 'org.springframework.boot'        version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.sonarqube'                   version '2.8'
	id 'com.google.cloud.tools.jib'      version '3.2.0'
	id 'java'
	id 'jacoco'
}

group = 'org.labcabrera.rolemaster'
version = version
sourceCompatibility = '16'

ext {
	set('springdocVersion',            '1.6.6')
	set('openjdkImageVersion',         '11.0.13')
	set('testcontainersVersion',       '1.16.3')
	set('dockerImagePrefix',           'labcabrera')
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation {
		extendsFrom testImplementation
	}
}

repositories {
	mavenCentral()
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'	
  
	implementation "org.springdoc:springdoc-openapi-webflux-ui:${springdocVersion}"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}")

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mongodb'

}

task integrationTest(type: Test) {
	group 'springboot-testing'
	description 'Runs the integration tests'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
	}
}

tasks.named("jar") {
	enabled = false
}

sonarqube {
	properties {
		property "sonar.host.url",          System.getenv('SONARQUBE_URL')
		property "sonar.login",             System.getenv('SONARQUBE_USERNAME')
		property "sonar.password",          System.getenv('SONARQUBE_PASSWORD')
	}
}


jib {
	from {
		image = "openjdk:${openjdkImageVersion}"
	}
	to {
		image = "${dockerImagePrefix}/${project.name}:${project.version}"
	}
	container {
		ports = ['8080']
	}
}
